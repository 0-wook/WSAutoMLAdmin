plugins {
    id 'org.springframework.boot' version '2.6.7'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id "com.github.node-gradle.node" version "3.3.0"
}

group = 'kr.or.automl'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'org.springframework.security:spring-security-oauth2-client'

    implementation 'org.springframework.boot:spring-boot-devtools'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.h2database:h2'
    implementation 'org.flywaydb:flyway-core'

    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
}

tasks.named('test') {
    useJUnitPlatform()
}

def frontendDir = "$projectDir/frontend"

node {
    download = false
    version = "16.14.0"
    nodeProjectDir = file("${frontendDir}")
}

task npmBuild(type: NpmTask) {
    args = ["run", "build"]
}

task copyFrontendBuildFiles(type: Copy) {
    from "$frontendDir/build"
    into "$buildDir/resources/main/static"
}

task setUpFrontEnd(type: GradleBuild) {
    tasks = ["npmInstall", "npmBuild", "copyFrontendBuildFiles"]
}

bootJar.dependsOn("setUpFrontEnd")
